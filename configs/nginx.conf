proxy_cache_path  /tmp/caching keys_zone=imgcache:100m levels=1:2 inactive=24h max_size=1000m;

upstream backend {
    server backend:8000;
}


server{
    listen          8080;
    server_name     localhost;

    ## Compression.
    gzip on;
    gzip_static on;

    # Disable gzip for browsers that do not support it — this will disable gzip for IE4–6
    gzip_disable "msie6";

    # compress proxied requests too.
    # it doesn't actually matter if the request is proxied, we still want it compressed.
    gzip_proxied any;

    # a pretty comprehensive list of content mime types that we want to compress
    # there's a lot of repetition here because different applications might use different
    # (and possibly non-standard) types. we don't really care, we still want them included
    # don't include text/html -- it is always included anyway

    gzip_types
        application/javascript
        application/octet-stream
        application/rss+xml
        application/vnd.ms-fontobject
        application/x-font
        application/x-font-opentype
        application/x-font-otf
        application/x-font-truetype
        application/x-font-ttf
        application/x-javascript
        application/json
        application/xhtml+xml
        application/xml
        font/opentype
        font/otf
        font/ttf
        image/svg+xml
        image/x-icon
        text/css
        text/javascript
        text/plain
        text/xml;


    # increase the compression level, at the expense of additional CPU
    # cpu cycles are cheap virtually everywhere now, bandwidth not nearly as much
    gzip_comp_level 6;

    # the default is to gzip only HTTP 1.1 requests
    # we want to gzip http 1.0 requests, too, so lower the level required
    gzip_http_version 1.0;

    # set the Vary: Accept-Encoding header to force proxies to store compressed and uncompressed versions
    # per the nginx docs, a bug in IE 4 - 6 will cause them to not cache anything with this on
    # most people aren't going to care about ie 6 anymore, but keep that in mind
    gzip_vary on;

    # increase the size of the buffers which hold responses to make sure larger content can be compressed too
    # this means there are 16 buffers and they can each hold 8k
    # if you serve a lot of ridiculously large text (like combined CSS) you might consider upping this slightly
    gzip_buffers 16 8k;

    # up the minimum length a little to account for gzip overhead
    # this means anything smaller than 50 bytes won't be compressed.
    # the default is 20 bytes, which is sooo tiny it's a waste to compress
    # gzip_min_length 50;
    gzip_min_length 1024;

    proxy_set_header Host $host;
    proxy_set_header X-Real-IP  $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;

    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";
    proxy_redirect off;
    client_max_body_size 10M;


    location ~ ^/(staticfiles)/ {
        # All static files will be loaded from nginx
        root /data/www;

        # proxy_cache imgcache;
        # add_header X-Proxy-Cache $upstream_cache_status;
        # proxy_cache_valid 1h; # we cache for only 1 hour since we can have deployments within that hour
        # proxy_buffering on;
    }

    location / {
        proxy_pass http://backend;
    }
}
